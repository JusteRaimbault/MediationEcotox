# number of articles with originality
#length(which(rowSums(them_probas)>0))
originalities=apply(them_probas,MARGIN = 1,FUN = function(r){if(sum(r)==0){return(0)}else{return(1 - sum(r^2))}})
cybindexes = c();cybresnames = c();iscyb=rep(FALSE,length(originalities))
for(cyb in cybnames){
indexes = which(names(keyword_dico)==cyb);
if(length(indexes)>0){
cybindexes=append(cybindexes,indexes[1]);
cybresnames=append(cybresnames,cyb)
iscyb[indexes[1]]=TRUE
}}
ggplot(data.frame(orig=originalities,cyb=iscyb), aes(x=orig, fill=cyb)) + geom_density(alpha=.3)
library(ggplot2)
ggplot(data.frame(orig=originalities,cyb=iscyb), aes(x=orig, fill=cyb)) + geom_density(alpha=.3)
length(which(iscyb))
sdat=as.tbl(dat)%>%group_by(iscyb)%>%summarise(mean=mean(orig))
dat=data.frame(orig=originalities,cyb=iscyb)
sdat=as.tbl(dat)%>%group_by(iscyb)%>%summarise(mean=mean(orig))
sdat=as.tbl(dat)%>%group_by(cyb)%>%summarise(mean=mean(orig))
length(which(iscyb))
dat=data.frame(orig=originalities,cyb=iscyb)
sdat=as.tbl(dat)%>%group_by(cyb)%>%summarise(mean=mean(orig))
library(ggplot2)
g=ggplot(dat, aes(x=orig, fill=cyb))
g+ geom_density(alpha=.3)+geom_vline(data=sdat, aes(xintercept=mean,  colour=cyb),
linetype="dashed", size=1)
sdat
dat
as.tbl(dat)%>%group_by(cyb)
g=ggplot(dat, aes(x=orig, fill=cyb))
g+ geom_density(alpha=.3)
cybprobas = them_probas[cybindexes,]
cybcumprobas = colSums(cybprobas)/length(which(rowSums(cybprobas)>0))
1 - sum(cybcumprobas^2)
sdat
Nb = 10000
nulljournalorigs=c()
for(i in 1:Nb){
probas = them_probas[sample.int(nrow(them_probas), size = length(cybindexes), replace = FALSE),]
cumprobas = colSums(probas)/length(which(rowSums(probas)>0))
nulljournalorigs=append(nulljournalorigs,1 - sum(cumprobas^2))
}
hist(nulljournalorigs,breaks=1000)
mean(nulljournalorigs)
head(them_probas)
i=1
neighbors(gcitation,v=cybnodes[i],mode="in")$name
gcitation
cybnodes
cybnodes=V(gcitation)[V(gcitation)$cyb==1]
cybnodes
neighbors(gcitation,v=cybnodes[i],mode="in")$name
keyword_dico[[neighbors(gcitation,v=cybnodes[i],mode="in")$name]]
cybsecorigin=c()
cybsecorigout=c()
cybsecorigall=c()
for(i in cybindexes){
show(i)
neigh = neighbors(gcitation,v=cybnodes[i],mode="in")$name
probas = rep(0,ncol(them_probas));count=0
for(n in 1:length(neigh)){
inds = which(names(keyword_dico==neigh[n]))
if(length(inds)>0){probas=probas+them_probas[inds[1],];count=count+1}
}
if(count>0){probas=probas/count}
if(sum(probas)>0){cybsecorigin=append(cybsecorigin,1-sum(probas^2))}
}
show(i)
neigh = neighbors(gcitation,v=cybnodes[i],mode="in")$name
## second order originality ?
cybsecorigin=c()
cybsecorigout=c()
cybsecorigall=c()
for(i in 1:length(cybnodes)){
show(i)
neigh = neighbors(gcitation,v=cybnodes[i],mode="in")$name
probas = rep(0,ncol(them_probas));count=0
for(n in 1:length(neigh)){
inds = which(names(keyword_dico==neigh[n]))
if(length(inds)>0){probas=probas+them_probas[inds[1],];count=count+1}
}
if(count>0){probas=probas/count}
if(sum(probas)>0){cybsecorigin=append(cybsecorigin,1-sum(probas^2))}
}
cybsecorigin=c()
cybsecorigout=c()
cybsecorigall=c()
for(i in 1:length(cybnodes)){
show(i)
neigh = neighbors(gcitation,v=cybnodes[i],mode="in")$name
show(neigh)
probas = rep(0,ncol(them_probas));count=0
for(n in 1:length(neigh)){
inds = which(names(keyword_dico==neigh[n]))
if(length(inds)>0){probas=probas+them_probas[inds[1],];count=count+1}
}
if(count>0){probas=probas/count}
if(sum(probas)>0){cybsecorigin=append(cybsecorigin,1-sum(probas^2))}
}
cybsecorigin=c()
cybsecorigout=c()
cybsecorigall=c()
for(i in 1:length(cybnodes)){
show(i)
neigh = neighbors(gcitation,v=cybnodes[i],mode="in")$name
show(neigh)
probas = rep(0,ncol(them_probas));count=0
for(n in 1:length(neigh)){
inds = which(names(keyword_dico)==neigh[n])
if(length(inds)>0){probas=probas+them_probas[inds[1],];count=count+1}
}
if(count>0){probas=probas/count}
if(sum(probas)>0){cybsecorigin=append(cybsecorigin,1-sum(probas^2))}
}
cybsecorigout=c()
#cybsecorigall=c()
for(i in 1:length(cybnodes)){
show(i)
neigh = neighbors(gcitation,v=cybnodes[i],mode="out")$name
show(neigh)
probas = rep(0,ncol(them_probas));count=0
for(n in 1:length(neigh)){
inds = which(names(keyword_dico)==neigh[n])
if(length(inds)>0){probas=probas+them_probas[inds[1],];count=count+1}
}
if(count>0){probas=probas/count}
if(sum(probas)>0){cybsecorigout=append(cybsecorigout,1-sum(probas^2))}
}
dat = data.frame(orig=c(cybsecorigin,cybsecorigout),type=c(rep("in",length(cybsecorigin),rep("out",length(cybsecorigout)))
)
)
c(cybsecorigin,cybsecorigout)
dat = data.frame(orig=c(cybsecorigin,cybsecorigout),type=c(rep("in",length(cybsecorigin)),rep("out",length(cybsecorigout)))
)
dat
g=ggplot(dat, aes(x=orig, fill=type)) + geom_density(alpha=.3)
ggplot(dat, aes(x=orig, fill=type)) + geom_density(alpha=.3)
sdat=as.tbl(dat)%>%group_by(type)%>%summarise(mean=mean(orig))
ggplot(dat, aes(x=orig, fill=type)) + geom_density(alpha=.3)+geom_vline(data=sdat, aes(xintercept=mean,  colour=cyb),linetype="dashed", size=1)
ggplot(dat, aes(x=orig, fill=type)) + geom_density(alpha=.3)+geom_vline(data=sdat, aes(xintercept=mean,  colour=type),linetype="dashed", size=1)
is.numeric("12")
as.numeric("12")
as.numeric("12mph")
is.numeric(as.numeric("12mph"))
gsub(x = "30 mph"," ","")
s=gsub(x = "30 mph"," ","")
s=gsub(x = s," ","")
s
sr=gsub(x = s," ","")
normalizedSpeed <- function(s){
if(!is.na(as.numeric(s))){return(as.numeric(s))}
sr=gsub(x = s," ","")
if(grepl("mph",sr)){return(as.numeric(gsub(x = sr,"mph",""))*1.609)}
else{return(NA)}
}
normalizedSpeed("30 mph")
normalizedSpeed("30mph")
normalizedSpeed("30")
normalizedSpeed(30)
raw <- raster(paste0(Sys.getenv("CN_HOME"),"/Data/PopulationDensity/raw/density_wgs84.tif"))
library(raster)
raw <- raster(paste0(Sys.getenv("CN_HOME"),"/Data/PopulationDensity/raw/density_wgs84.tif"))
raw
xyFromCell()
xyFromCell
xyFromCell(raw,1230)
library(RPostgreSQL)
library(rgeos)
con = dbConnect(dbDriver("PostgreSQL"), dbname="osm_simpl",user="Juste",host="localhost" )
query = dbSendQuery(con,"SELECT ST_AsText(geography) AS geom FROM links;")
data = fetch(query,n=-1)
geoms = data$geom
roads=list()
for(i in 1:length(geoms)){
r=readWKT(geoms[i])@lines[[1]];r@ID=as.character(i)
roads[[i]]=r
}
splines = SpatialLines(LinesList = roads)
plot(splines)
library(igraph)
help("difference")
real_raw = read.csv(
paste0(Sys.getenv("CN_HOME"),'/Results/Morphology/Density/Numeric/20150806_europe50km_10kmoffset_100x100grid.csv'),
sep=";"
)
real =real_raw[!is.na(real_raw[,3])&!is.na(real_raw[,4])&!is.na(real_raw[,5])&!is.na(real_raw[,6])&!is.na(real_raw[,7])&!is.na(real_raw[,8])&!is.na(real_raw[,9]),]
for(j in 1:ncol(real)){real[,j]=(real[,j]-min(real[,j]))/(max(real[,j])-min(real[,j]))}
library(RColorBrewer)
library(ggplot2)
library(MASS)
source(paste0(Sys.getenv('CN_HOME'),'/Models/Utils/R/plots.R'))
real_raw = read.csv(
paste0(Sys.getenv("CN_HOME"),'/Results/Morphology/Density/Numeric/20150806_europe50km_10kmoffset_100x100grid.csv'),
sep=";"
)
real =real_raw[!is.na(real_raw[,3])&!is.na(real_raw[,4])&!is.na(real_raw[,5])&!is.na(real_raw[,6])&!is.na(real_raw[,7])&!is.na(real_raw[,8])&!is.na(real_raw[,9]),]
real_ind = real[5*(0:(nrow(real)/5))+1,]
names(real)
indic="moran"
p = ggplot(data.frame(x=real$y,y=1-real$x,density_max=real[[indic]]),aes(x=x,y=y,colour=density_max))
p+geom_point()+xlab("")+ylab("")+labs(title=indic)+scale_colour_gradientn(colours=rev(rainbow(5)))+scale_y_continuous(breaks=NULL)+scale_x_continuous(breaks=NULL)
indic="distance"
p = ggplot(data.frame(x=real$y,y=1-real$x,density_max=real[[indic]]),aes(x=x,y=y,colour=density_max))
p+geom_point()+xlab("")+ylab("")+labs(title=indic)+scale_colour_gradientn(colours=rev(rainbow(5)))+scale_y_continuous(breaks=NULL)+scale_x_continuous(breaks=NULL)
map<-function(indic){
d=data.frame(x=real$y,y=1-real$x);d[[indic]]=real[[indic]]
p=ggplot(d,aes_string(x="x",y="y",colour=indic))
p+geom_point(shape=".",size=2)+xlab("")+ylab("")+labs(title=indic)+scale_colour_gradientn(colours=rev(rainbow(5)))+scale_y_continuous(breaks=NULL)+scale_x_continuous(breaks=NULL)
}
# multiplots
indics=c("moran","distance","entropy","slope")
plots=list();k=1
for(indic in indics){
plots[[k]]=map(indic)
k=k+1
}
multiplot(plotlist=plots,cols=2)
map<-function(indic){
d=data.frame(x=real$y,y=1-real$x);d[[indic]]=real[[indic]]
p=ggplot(d,aes_string(x="x",y="y",colour=indic))
p+geom_point(shape=".",size=1)+xlab("")+ylab("")+labs(title=indic)+scale_colour_gradientn(colours=rev(rainbow(5)))+scale_y_continuous(breaks=NULL)+scale_x_continuous(breaks=NULL)
}
# multiplots
indics=c("moran","distance","entropy","slope")
plots=list();k=1
for(indic in indics){
plots[[k]]=map(indic)
k=k+1
}
multiplot(plotlist=plots,cols=2)
names(real)
vars = c(3,4,5,6)
ccoef=c()
for(k in 2:15){
show(k)
clust = kmeans(real[,vars],k,iter.max=30)
#ccoef=append(ccoef,sum(clust$withinss/clust$size)/k)# mean cluster size
ccoef=append(ccoef,clust$tot.withinss/clust$betweenss)# clust coef
plot(real$y,1-real$x,col=clust$cluster,pch='.',cex=3,main=paste0('k=',k),xlab="",ylab="",xaxt='n',yaxt='n')
}
ccoef
vars = c(3,4,5,6)
ccoef=c()
for(k in 2:15){
show(k)
clust = kmeans(real[,vars],k,iter.max=30)
#ccoef=append(ccoef,sum(clust$withinss/clust$size)/k)# mean cluster size
ccoef=append(ccoef,clust$tot.withinss/(clust$betweenss+clust$tot.withinss))# clust coef
plot(real$y,1-real$x,col=clust$cluster,pch='.',cex=3,main=paste0('k=',k),xlab="",ylab="",xaxt='n',yaxt='n')
}
ccoef
vars = c(3,4,5,6)
ccoef=c()
par(mfrow=c(3,3))
for(k in 2:11){
show(k)
clust = kmeans(real[,vars],k,iter.max=30)
#ccoef=append(ccoef,sum(clust$withinss/clust$size)/k)# mean cluster size
withinProp=clust$tot.withinss/(clust$betweenss+clust$tot.withinss)
ccoef=append(ccoef,withinProp)# clust coef
plot(real$y,1-real$x,col=clust$cluster,pch='.',cex=3,main=paste0('k=',k,' ; withinProp=',withinProp),xlab="",ylab="",xaxt='n',yaxt='n')
}
vars = c(3,4,5,6)
ccoef=c()
par(mfrow=c(3,3))
for(k in 3:11){
show(k)
clust = kmeans(real[,vars],k,iter.max=30)
#ccoef=append(ccoef,sum(clust$withinss/clust$size)/k)# mean cluster size
withinProp=clust$tot.withinss/(clust$betweenss+clust$tot.withinss)
ccoef=append(ccoef,withinProp)# clust coef
plot(real$y,1-real$x,col=clust$cluster,pch='.',cex=3,main=paste0('k=',k,' ; withinProp=',withinProp),xlab="",ylab="",xaxt='n',yaxt='n')
}
shiny::runApp('~/Documents/ComplexSystems/CyberGeo/cybergeo20/Cybergeo20')
help("forceNetwork")
library(DiceDesign)
install.packages
install.packages("DiceDesign")
setwd(paste0(Sys.getenv('CS_HOME'),'/RobustnessDiscrepancy/Models'))
library(rgdal)
library(rgeos)
library(dplyr)
library(cartography)
departement = "69"
iris <- readOGR('../Data/raw/iris/shpfr',paste0('CONTOURS-IRIS',departement))
datairis <- read.csv('../Data/raw/iris/structure-distrib-revenus-iris-2011/RFDM2011IRI.csv',sep=';')
names(datairis)[1]="DCOMIRIS"
datacom <- read.csv('../Data/raw/iris/structure-distrib-revenus-com-2011/RFDM2011COM.csv',sep=';')
datacom$DCOMIRIS = paste0(datacom$COM,"0000")
ids = as.tbl(data.frame(ids=as.character(iris@data$DCOMIRIS)))
cdata=as.tbl(data.frame(medincome=datacom$RFMQ211,ids=datacom$DCOMIRIS))
idata=as.tbl(data.frame(medincome=datairis$RFMQ211,ids=datairis$DCOMIRIS))
jdata=left_join(ids,cdata,by=c("ids"))
jdata=left_join(jdata,idata,by=c("ids"),copy=TRUE)
jdata$medincome = ifelse(!is.na(jdata$medincome.y),jdata$medincome.y,jdata$medincome.x) # rq : a ifelse could do that easily
jdata
spdata =merge(iris,df)
df=data.frame(DCOMIRIS=iris@data$DCOMIRIS,
#localmoran=localmorans,
medincome=jdata$medincome)
names(df)[1]="DCOMIRIS"
spdata =merge(iris,df)
spdata
centroids = gCentroid(iris,byid = TRUE)
centroids
iris
spdata = merge(SpatialPointsDataFrame(centroids@coords,iris@data),df)
spdata@coords
spdata@data
as.tbl(spdata@data)
as.tbl(iris@data)
as.tbl(datairis)
as.tbl(datairis)$NBMEN11
iris <- readOGR('../Data/raw/iris/shpfr','grandParis')
plot(grandParis)
plot(iris)
datairis <- read.csv('../Data/raw/iris/structure-distrib-revenus-iris-2011/RFDM2011IRI.csv',sep=';')
names(datairis)[1]="DCOMIRIS"
datacom <- read.csv('../Data/raw/iris/structure-distrib-revenus-com-2011/RFDM2011COM.csv',sep=';')
datacom$DCOMIRIS = paste0(datacom$COM,"0000")
ids = as.tbl(data.frame(ids=as.character(iris@data$DCOMIRIS)))
cdata=as.tbl(data.frame(medincome=datacom$RFMQ211,ids=datacom$DCOMIRIS))
idata=as.tbl(data.frame(medincome=datairis$RFMQ211,ids=datairis$DCOMIRIS))
jdata=left_join(ids,cdata,by=c("ids"))
jdata=left_join(jdata,idata,by=c("ids"),copy=TRUE)
#jdata$medincome = jdata$medincome.x*as.numeric(!is.na(jdata$medincome.x))+ jdata$medincome.y*as.numeric(!is.na(jdata$medincome.y))
# rq : a ifelse could do that easily
jdata$medincome = ifelse(!is.na(jdata$medincome.y),jdata$medincome.y,jdata$medincome.x) # rq : a ifelse could do that easily
x = jdata$medincome - mean(jdata$medincome,na.rm=TRUE )
x[is.na(x)]=0
# compute distance matrix for spatial autocorr
centroids = gCentroid(iris,byid = TRUE)
spweights = 1/spDists(centroids@coords)
w=as.matrix(spweights)
diag(w)<- 0
localmorans = (diag(x)%*%w)%*%matrix(x,nrow=length(x))
localmorans = localmorans / ((w%*%matrix(rep(1,length(x)),nrow=length(x)))*(matrix(x,ncol=length(x))%*%matrix(x,nrow=length(x)))[1,1])
localmorans[localmorans==0]=NA
df=data.frame(DCOMIRIS=iris@data$DCOMIRIS,
localmoran=localmorans,
medincome=jdata$medincome)
names(df)[1]="DCOMIRIS"
spdata =merge(iris,df)
par(mfrow=c(1,2))
#plot(spdata, border = NA, col = NA, bg = "#E3DEBF")
choroLayer(spdf = spdata,
df = df,
var="localmoran",
col=cols,
nclass=10,
#breaks = quantile(data$NBMEN11,probs=seq(from=0,to=1,by=0.2),na.rm=TRUE),
add=FALSE,lwd = 0.05
)
#plot(spdata,border = "grey20", lwd=0.1, add=TRUE)
choroLayer(spdf = spdata,
df = df,
var="medincome",
col=cols,
nclass=10,
#breaks = quantile(data$NBMEN11,probs=seq(from=0,to=1,by=0.2),na.rm=TRUE),
add=FALSE,lwd = 0.05
)
cols <- carto.pal(pal1 = "green.pal",n1 = 5, pal2 = "red.pal",n2 = 5)
par(mfrow=c(1,2))
#plot(spdata, border = NA, col = NA, bg = "#E3DEBF")
choroLayer(spdf = spdata,
df = df,
var="localmoran",
col=cols,
nclass=10,
#breaks = quantile(data$NBMEN11,probs=seq(from=0,to=1,by=0.2),na.rm=TRUE),
add=FALSE,lwd = 0.05
)
#plot(spdata,border = "grey20", lwd=0.1, add=TRUE)
choroLayer(spdf = spdata,
df = df,
var="medincome",
col=cols,
nclass=10,
#breaks = quantile(data$NBMEN11,probs=seq(from=0,to=1,by=0.2),na.rm=TRUE),
add=FALSE,lwd = 0.05
)
#plot(spdata,border = "grey20", lwd=0.1, add=TRUE)
par(mfrow=c(1,2))
#plot(spdata, border = NA, col = NA, bg = "#E3DEBF")
choroLayer(spdf = spdata,
df = df,
var="localmoran",
col=cols,
nclass=10,
#breaks = quantile(data$NBMEN11,probs=seq(from=0,to=1,by=0.2),na.rm=TRUE),
add=FALSE,lwd = 0.1
)
#plot(spdata,border = "grey20", lwd=0.1, add=TRUE)
choroLayer(spdf = spdata,
df = df,
var="medincome",
col=cols,
nclass=10,
#breaks = quantile(data$NBMEN11,probs=seq(from=0,to=1,by=0.2),na.rm=TRUE),
add=FALSE,lwd = 0.1
)
plot(spdata, border = NA, col = NA, bg = "#E3DEBF")
plot(spdata,border = "grey20", lwd=0.75, add=TRUE)
par(mfrow=c(1,2))
plot(spdata, border = NA, col = NA, bg = "#E3DEBF")
choroLayer(spdf = spdata,
df = df,
var="localmoran",
col=cols,
nclass=10,
#breaks = quantile(data$NBMEN11,probs=seq(from=0,to=1,by=0.2),na.rm=TRUE),
add=FALSE,lwd = 0.1
)
plot(spdata,border = "grey20", lwd=0.1, add=TRUE)
plot(spdata, border = NA, col = NA, bg = "#E3DEBF")
choroLayer(spdf = spdata,
df = df,
var="medincome",
col=cols,
nclass=10,
#breaks = quantile(data$NBMEN11,probs=seq(from=0,to=1,by=0.2),na.rm=TRUE),
add=FALSE,lwd = 0.1
)
plot(spdata,border = "grey20", lwd=0.1, add=TRUE)
par(mfrow=c(1,2))
plot(spdata, border = NA, col = NA, bg = "#E3DEBF")
choroLayer(spdf = spdata,
df = df,
var="localmoran",
col=cols,
nclass=10,
#breaks = quantile(data$NBMEN11,probs=seq(from=0,to=1,by=0.2),na.rm=TRUE),
add=TRUE,lwd = 0.1
)
plot(spdata,border = "grey20", lwd=0.1, add=TRUE)
plot(spdata, border = NA, col = NA, bg = "#E3DEBF")
choroLayer(spdf = spdata,
df = df,
var="medincome",
col=cols,
nclass=10,
#breaks = quantile(data$NBMEN11,probs=seq(from=0,to=1,by=0.2),na.rm=TRUE),
add=TRUE,lwd = 0.1
)
plot(spdata,border = "grey20", lwd=0.1, add=TRUE)
as.tbl(datairis)
as.tbl(datacom)
ids = as.tbl(data.frame(ids=as.character(iris@data$DCOMIRIS)))
cdata=as.tbl(data.frame(medincome=datacom$RFMQ211,population=datacom$NBMEN11,ids=datacom$DCOMIRIS))
idata=as.tbl(data.frame(medincome=datairis$RFMQ211,population=datairis$NBMEN11,ids=datairis$DCOMIRIS))
jdata=left_join(ids,cdata,by=c("ids"))
jdata=left_join(jdata,idata,by=c("ids"),copy=TRUE)
jdata$medincome = ifelse(!is.na(jdata$medincome.y),jdata$medincome.y,jdata$medincome.x)
jdata$population =  ifelse(!is.na(jdata$population.y),jdata$population.y,jdata$population.x)
as.tbl(jdata)
data
jdata = data.frame(medincome=jdata$medincome,population=jdata$population)
as.tbl(jdata)
ids = as.tbl(data.frame(ids=as.character(iris@data$DCOMIRIS)))
cdata=as.tbl(data.frame(medincome=datacom$RFMQ211,population=datacom$NBMEN11,ids=datacom$DCOMIRIS))
idata=as.tbl(data.frame(medincome=datairis$RFMQ211,population=datairis$NBMEN11,ids=datairis$DCOMIRIS))
jdata=left_join(ids,cdata,by=c("ids"))
jdata=left_join(jdata,idata,by=c("ids"),copy=TRUE)
jdata$medincome = ifelse(!is.na(jdata$medincome.y),jdata$medincome.y,jdata$medincome.x)
jdata$population =  ifelse(!is.na(jdata$population.y),jdata$population.y,jdata$population.x)
jdata = data.frame(ids=jdata$ids,medincome=jdata$medincome,population=jdata$population)
jdata
1000000/5000
library(dplyr)
setwd(paste0(Sys.getenv('CS_HOME'),'/MediationEcotox/Results/Ecosystem_simple_LHS'))
res <- read.csv('2016_04_12_14_40_46_LOCAL.csv')
dim(res)
res <- as.tbl(read.csv('2016_04_12_14_40_46_LOCAL.csv'))
res
gres <- res %>% group_by(id)
gres
gres <- res %>% group_by(id) %>% summarise(collapsed=mean(collapsed))
gres
gres <- res %>% group_by(id) %>% summarise(
collapsed=mean(collapsed),finalSpecies=mean(finalSpecies),finalTime=mean(finalTime),speciesBalance=mean(speciesBalance),
energyFromFishes=mean(energyFromFishes),energyFromRessources=mean(energyFromRessources),initialBalance=mean(initialBalance),
maturAge=mean(maturAge),maxAge=mean(maxAge),movingCost=mean(movingCost),numFishes=mean(numFishes),numRessources=mean(numRessources),
reproductionCost=mean(reproductionCost),ressourceRenewal=mean(ressourceRenewal)
)
gres
max(gres$finalSpecies)
max(gres$finalTime)
gres[gres$finalTime==2000,]
data.frame(gres[gres$finalTime==2000,])
summary(gres$collapsed)
res <- as.tbl(read.csv('2016_04_12_14_40_46_LOCAL.csv'))
gres <- res %>% group_by(id) %>% summarise(
collapsed=mean(collapsed),finalSpecies=mean(finalSpecies),finalTime=mean(finalTime),speciesBalance=mean(speciesBalance),
energyFromFishes=mean(energyFromFishes),energyFromRessources=mean(energyFromRessources),initialBalance=mean(initialBalance),
maturAge=mean(maturAge),maxAge=mean(maxAge),movingCost=mean(movingCost),numFishes=mean(numFishes),numRessources=mean(numRessources),
reproductionCost=mean(reproductionCost),ressourceRenewal=mean(ressourceRenewal)
)
gres
summary(gres$finalSpecies)
res <- as.tbl(read.csv('2016_04_12_14_50_14_GRID.csv'))
gres <- res %>% group_by(id) %>% summarise(
collapsed=mean(collapsed),finalSpecies=mean(finalSpecies),finalTime=mean(finalTime),speciesBalance=mean(speciesBalance),
energyFromFishes=mean(energyFromFishes),energyFromRessources=mean(energyFromRessources),initialBalance=mean(initialBalance),
maturAge=mean(maturAge),maxAge=mean(maxAge),movingCost=mean(movingCost),numFishes=mean(numFishes),numRessources=mean(numRessources),
reproductionCost=mean(reproductionCost),ressourceRenewal=mean(ressourceRenewal)
)
gres
summary(gres$finalSpecies)
summary(gres$collapsed)
hist(gres$finalTime,breaks=100)
hist(gres$finalTime,breaks=80)
