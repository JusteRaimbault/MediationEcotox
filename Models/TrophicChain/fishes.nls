
;;
; fishes.nls : fishes related procedures
;;



;;
; Spatial update of fishes
to move-fishes
  ask fishes[
    wander 
  ]
end

;;
; fish procedure for movement
;   - may implement different moving strategies
to wander
  ; random wandering
  repeat #-wandering-moves [
    rt random 360
    fd wandering-step-distance
  ]
  ; looses energy when moves
  ; (moving cost by tick and by spatial unit)
  set energy energy - (fish-moving-cost * wandering-step-distance)
end


;;
; eating phase
to eat-fishes

  ; first ressources are eaten (convention)
  eat-ressources
  
  ; then fishes eat themselves
  eat-other-fishes

end


to eat-ressources
  ask fishes [
    let surrounding-eaten-ressources ((ressources in-radius ressource-eating-radius) with [member? ressource-type-index [eaten-ressources] of myself])
    if count surrounding-eaten-ressources > 0 [
      ; eat it
      ;   variable number of eaten and energy gained ? -> ressources-energy-matrix
      ask one-of surrounding-eaten-ressources [die] set energy energy + 1
    ]
  ]
end

to eat-other-fishes
  ; lets do that at random : a simple ask fish should mix species uniformally, so that a chain A -> B -> C may be broken in the middle or done entierely, in an uniform way, quite logical.
  ask fishes [
    let surrounding-eaten-fishes ((fishes in-radius fish-interaction-radius) with [member? species-index [eaten-fishes] of myself])
    if count surrounding-eaten-fishes > 0 [
      ask one-of surrounding-eaten-fishes [die] set energy energy + 1 
    ] 
  ]
  
end



;;
; reproduction phase
to reproduce-fishes
  ; simple for now : reproduce with same species fishes in radius eating-radius (==> interaction-radius)
  ask fishes [set reproduced? false]
  
  ask fishes with [(ticks - birth-date) > fish-maturation-age] [
    ; potential mates have to have enough energy to reproduce (no suicide to have sex !)
    let potential-mates ((other fishes in-radius fish-interaction-radius) with [(ticks - birth-date) > fish-maturation-age and not reproduced? and species-index = [species-index] of myself and energy > reproduction-cost])
    if count potential-mates > 0 and energy > reproduction-cost [
      set reproduced? true set energy energy - reproduction-cost ask one-of potential-mates [set reproduced? true set energy energy - reproduction-cost] hatch 1 [new-fish species false]
    ]
  ]
end


;;
; dying phase
to check-fishes-survival
  
  ; make fishes age ? -> no need, use date-of-birth instead
  ; kill old fishes
  ask fishes with [(ticks - birth-date) > max-fish-age][die]
  
  ; kill fishes with no energy
  ask fishes with [energy <= 0][die]
end



to new-fish [name initial?]
  
  
  ifelse initial? [
  
    set species name set underbreed name
    set species-index position name species-names
    new-underbreeded-agent species-shapes
    set size 2
    move-to fishes-initial-patch
  
    ; fixed parameters (for now)
  
    ; TODO : may be optimzed, global variable as list, get value by species index, only var owned by fishes ?
  
    set ressource-eating-radius 4
    ; eaten ressources
    set eaten-ressources []
    let i 0 foreach matrix:get-row ressources-matrix species-index [if ? > 0 [set eaten-ressources lput i eaten-ressources] set i i + 1]
  
    set fish-interaction-radius 4
    set eaten-fishes []
    set i 0 foreach matrix:get-row trophic-matrix species-index [if ? > 0 [set eaten-fishes lput i eaten-fishes] set i i + 1]
  
  ][
     set reproduced? true
  ]
  
  ; initial energy : crucial parameter as should determine short-term collapse of the ecosystem
  ;set energy initial-fish-energy
  ; Convention : E_0 = 1 ; other parameters all in units of E_0
  set energy 1
  
  ; date of birth
  set birth-date ticks
  
end

;;
; initial patches within feasible area for this species
to-report fishes-initial-patch
  report one-of patches
end





