
;; setup



to setup
  
  output-print "Setup..."
  
  init-setup
  
  ;; general
  setup-global
  
  ;; aquatic environment
  setup-environment
  
  ;; ressources within the environment
  ; (needs to be done before fishes : ressources-matrix required)
  setup-ressources
  
  ;; species
  setup-species
  
  ;; plots
  setup-pen-plots
  
  finish-setup
  
end


;;
;
to init-setup
  if headless? != true [clear-all]
  reset-ticks
end

to finish-setup
  ; better to reset ticks at the end of setup (for plots setup)
  ; issue with reset-ticks and fishes initialization
  ;reset-ticks
end

to setup-global
  
  ;set initial-ressources 10
  
  
  ;; indicators
  set species-count []
  
  set pollution-dilation-rate 0.05
  
  
  set ressource-eating-radius 1
  set fish-interaction-radius 1
  
end


to setup-environment
  
  output-print "..setup environment"
  
  ; read zones size from setup file
  set env-zones read-table "setup/environment.tab" ":" ;(task [show ? report ?])

  color-patches
end


to setup-species
  
  output-print "..setup species"
  
  ; globals vars
  set species-names read-file (word "setup/" setup-dir "/species.txt")
  set #-species length species-names
  
  ; trophic matrices
  ; (no check, assume consistency)
  set trophic-matrix read-numeric-csv-as-matrix (word "setup/" setup-dir "/trophic-matrix.csv") ";"
  set trophic-energy-matrix read-numeric-csv-as-matrix (word "setup/" setup-dir "/trophic-energy-matrix.csv") ";"
  
  
  ; shapes (no color for species ?)
  let raw-species-shapes map [explode ";" ?] (read-file (word "setup/" setup-dir "/species-shapes.csv"))
  set species-shapes table-make
  let i 0 foreach species-names [set species-shapes table-put species-shapes (list ? "shape") (item 0 (item i raw-species-shapes)) set species-shapes table-put species-shapes (list ? "color") (item 1 (item i raw-species-shapes)) set i i + 1]
  
  
  
  ;; setup fishes
  set i 0
  foreach species-names [
    let name ? let num 0
    ifelse i = 1 [set num (initial-fishes / 2 + random (initial-fishes / 2))][set num floor (initial-species-balance * (initial-fishes / 2 + random (initial-fishes / 2)))]
    create-fishes num [new-fish name true]
    set i i + 1  
  ]
  
  
end


to setup-ressources
  
  output-print "..setup ressources"
  
  set ressources-names read-file (word "setup/" setup-dir "/ressources.txt")
  set #-ressources length ressources-names
  
  set ressources-matrix read-numeric-csv-as-matrix (word "setup/" setup-dir "/ressources-matrix.csv") ";"
  
  let raw-ressources-shapes-and-color map [explode ";" ?] (read-file (word "setup/" setup-dir "/ressources-shapes.csv"))
  set ressources-shapes table-make
  ; requirement : nrow(ressources) == nrow(ressources shapes)
  let i 0 foreach ressources-names [set ressources-shapes table-put ressources-shapes (list ? "shape") (item 0 (item i raw-ressources-shapes-and-color)) set ressources-shapes table-put ressources-shapes (list ? "color") (item 1 (item i raw-ressources-shapes-and-color)) set i i + 1]
  
  set ressources-spatial-constraints read-table (word "setup/" setup-dir "/ressources-spatial-constraints.tab") ":" ;(task [report map read-from-string (explode ";" ?)])
  foreach table-keys ressources-spatial-constraints [set ressources-spatial-constraints table-put ressources-spatial-constraints ? (map read-from-string (explode ";" (table-get ressources-spatial-constraints ?)))]
  
  ; setup ressources in themselves
  foreach ressources-names [
     let name ?
     create-ressources (initial-ressources / 2 + random (initial-ressources / 2)) [
       new-ressource name
     ]
  ]
  
  
end



to setup-pen-plots
  
  ; add pens depending on species number
  ; quite shitty, have to use temporary-pen
  ;set-current-plot-pen
  ;create-temporary-plot-pen
   
  ; TODO
    
end







